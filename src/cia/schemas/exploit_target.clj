(ns cia.schemas.exploit-target
  (:require [cia.schemas.common :as c]
            [cia.schemas.relationships :as rel]
            [cia.schemas.vocabularies :as v]
            [schema.core :as s]
            [schema-tools.core :as st]))

(s/defschema Vulnerability
  "See http://stixproject.github.io/data-model/1.2/et/VulnerabilityType/"
  {(s/optional-key :is_known) s/Bool
   (s/optional-key :is_public_acknowledged) s/Bool
   :title s/Str
   :description [s/Str]
   (s/optional-key :short_description) [s/Str]
   (s/optional-key :cve_id) s/Str
   (s/optional-key :osvdb_id) s/Int
   (s/optional-key :source) s/Str ; source of CVE or OSVDB ref
   (s/optional-key :discovered_datetime) c/Time ; Simplified
   (s/optional-key :published_datetime) c/Time ; Simplified
   ;; TODO - :affected_software below is greatly simplified, should it be expanded?
   (s/optional-key :affected_software) [s/Str]
   (s/optional-key :references) [c/URI]
   ;; Not provided: CVSS_Score ; Should it be?
   })

(s/defschema Weakness
  "See http://stixproject.github.io/data-model/1.2/et/WeaknessType/"
  {:description [s/Str]
   (s/optional-key :cwe_id) s/Str ;; CWE identifier for a particular weakness
   })

(s/defschema Configuration
  "See http://stixproject.github.io/data-model/1.2/et/ConfigurationType/"
  {:description [s/Str]
   (s/optional-key :short_description) [s/Str]
   (s/optional-key :cce_id) s/Str ;; The CCE identifier for a configuration item
   })

(s/defschema ExploitTarget
  "See http://stixproject.github.io/data-model/1.2/et/ExploitTargetType/"
  (st/merge
   c/GenericStixIdentifiers
   {:timestamp c/Time
    (s/optional-key :version) s/Str
    (s/optional-key :vulnerability) [Vulnerability]
    (s/optional-key :weakness) [Weakness]
    (s/optional-key :configuration) [Configuration]
    (s/optional-key :potential_COAs) rel/PotentialCOAs
    (s/optional-key :source) c/Source
    (s/optional-key :related_exploit_targets) rel/RelatedExploitTargets

    ;; Not provided: related_packages (deprecated)
    ;; Not provided: handling
    }))

(s/defschema NewExploitTarget
  "Schema for submitting ExploitTargets"
  (st/merge (st/dissoc ExploitTarget
                       :id
                       :timestamp)
            {(s/optional-key :timestamp) s/Str}))

(s/defn realize-exploit-target :- ExploitTarget
  [new-exploit-target :- NewExploitTarget
   id :- s/Str]
  (assoc new-exploit-target
         :id id
         :timestamp (c/timestamp (:timestamp new-exploit-target))))
