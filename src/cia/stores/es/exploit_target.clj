(ns cia.stores.es.exploit-target
  (:import java.util.UUID)
  (:require
   [schema.core :as s]
   [cia.stores.es.index :refer [es-conn index-name]]
   [cia.schemas.exploit-target :refer [ExploitTarget
                                       NewExploitTarget
                                       realize-exploit-target]]
   [cia.stores.es.document :refer [create-doc
                                   update-doc
                                   get-doc
                                   delete-doc
                                   search-docs]]))

(def ^{:private true} mapping "exploit-targe")

(defn- make-id [schema j]
  (str "exploit-target" "-" (UUID/randomUUID)))

(defn handle-create-exploit-target [state new-exploit-target]
  (let [id (make-id ExploitTarget new-exploit-target)
        realized (realize-exploit-target new-exploit-target id)]
    (create-doc es-conn index-name mapping realized)))

(defn handle-update-exploit-target [state id new-exploit-target]
  (update-doc
   es-conn
   index-name
   mapping
   id
   new-exploit-target))

(defn handle-read-exploit-target [state id]
  (get-doc es-conn index-name mapping id))

(defn handle-delete-exploit-target [state id]
  (delete-doc es-conn index-name mapping id))

(defn handle-list-exploit-targets [state filter-map]
  (search-docs es-conn index-name mapping filter-map))
