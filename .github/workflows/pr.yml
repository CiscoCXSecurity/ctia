name: GitHub Actions Pull Request

on:
  pull_request:

env:
  LOG_DIR: ~/log
  LEIN_ROOT: 1
  CTIA_MAJOR_VERSION: 1
  COMPOSE_URI: https://github.com/docker/compose/releases/download/1.9.0
  COMPOSE_BIN: ~/bin/docker-compose-1-9-0
  COMPOSE_LOG: ~/log/docker-compose.log
  CTIA_STORE_ES_DEFAULT_HOST: 127.0.0.1
  CTIA_STORE_ES_DEFAULT_INDEXNAME: elasticsearch
  CTIA_STORE_ES_DEFAULT_CLUSTERNAME: elasticsearch
  CTIA_HOOK_ES_HOST: 127.0.0.1
  CTIA_HOOK_ES_PORT: 9200
  CTIA_HOOK_ES_INDEXNAME: elasticsearch
  CTIA_HOOK_REDIS_URI: redis://127.0.0.1:6379
  # number of test-matrix builds
  # 1 setup + 14 test jobs + 1 for fan-in
  # allows 2 commits to build simultaneously, since one build
  # will take at most 10 builds at any one time
  CTIA_NSPLITS: 14
  SHELLCHECK_VERSION: v0.7.1 # "stable" or "v0.4.7", or "latest"
  BB_VERSION: 0.2.3

jobs:
  setup:
    runs-on: ubuntu-18.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      previous-runs: ${{ steps.set-matrix.outputs.previous-runs }}
    steps:
      - name: Setup PATH
        run: |
          mkdir -p ~/bin
          echo "~/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Setup test matrix splits
        id: set-matrix
        run: |
          set +x
          mkdir -p tmp 
          cd tmp 
          # calculate (range ${CTIA_NSPLITS})
          node -e "console.log(JSON.stringify([...Array(${CTIA_NSPLITS}).keys()]))" > splits.json
          # send splits to 'matrix' output variable for the test-matrix job
          echo "::set-output name=matrix::$( cat splits.json )"
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/bin
          key: ctia-setup-

      # Setup previous timing information
      - name: Cache
        id: get-timing
        uses: actions/cache@v2
        with:
          path: |
            target/test-results/all-test-timings.edn
          # cache will never match, will always restore from 'restore-keys'.
          # this is so we pick up timing information from the most recent build.
          key: ctia-all-test-timings-${{ env.GITHUB_REF }}-${{ env.GITHUB_SHA }}
          # cache should match test timings from previous runs, if they exist
          restore-keys: |
            ctia-all-test-timings-${{ env.GITHUB_REF }}-
            ctia-all-test-timings-master-
            ctia-all-test-timings-
      - run: |
          if [ -f target/test-results/all-test-timings.edn ]; then
            echo "Found new timings"
            cat target/test-results/all-test-timings.edn
            cp target/test-results/all-test-timings.edn dev-resources/ctia_test_timings.edn
          fi
      - name: Upload current test timing
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: current-test-timing
          path: dev-resources/ctia_test_timings.edn

      # Run shellcheck on CTIA's scripts
      - name: Install shellcheck
        run: |
          if ! command -v shellcheck &> /dev/null || ! shellcheck --version | grep "^version: ${SHELLCHECK_VERSION}$"
          then
            ( set -x && wget -qO- "https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION}/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz" | tar -xJv )
            ( set -x && cp "shellcheck-${SHELLCHECK_VERSION}/shellcheck" ~/bin/shellcheck )
          fi
          shellcheck --version
      - name: Run shellcheck
        run: ./scripts/shellcheck-build.sh
  test-matrix:
    runs-on: ubuntu-18.04
    needs: [setup]
    strategy:
      matrix:
        this-split: ${{fromJson(needs.setup.outputs.matrix)}}
    env:
      CTIA_THIS_SPLIT: ${{ matrix.this-split }}
    steps:
      - name: Setup PATH
        run: |
          mkdir -p ~/bin
          echo "~/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Download test timings
        uses: actions/download-artifact@v2
        with:
          name: current-test-timing
          path: target/current-test-timing
      - run: |
          if [ -f target/current-test-timing/all-test-timings.edn ]; then
            echo "Updating dev-resources/ctia_test_timings.edn with new timing"
            cp target/current-test-timing/all-test-timings.edn dev-resources/ctia_test_timings.edn
          else
            echo "No previous timings found"
          fi
      - run: cat dev-resources/ctia_test_timings.edn
      - name: ES setup
        run: sudo sysctl -w vm.max_map_count=262144

      - name: Create log dir if missing
        run: mkdir -p $LOG_DIR

      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.4'

      - name: Docker (async)
        run: docker-compose -f containers/dev/docker-compose.yml up -d > $COMPOSE_LOG &
      - uses: actions/setup-java@v1
        with:
          java-version: '11.0.9'
      - run: java -version
      - uses: DeLaGuardo/setup-clojure@e73bf2b6435244b2c9c5c226ae5022d91d0ce702
        with:
          lein: 2.9.4
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/bin
            ~/.m2
            ~/.cache/pip
          key: |
            ctia-test-matrix-${{ hashFiles('project.clj') }}
            ctia-test-matrix-

      - name: Setup folders
        run: |
          mkdir -p ~/bin
          mkdir -p ~/log

      - run: ./build/run-tests.sh
        env:
          CTIA_WAIT_DOCKER: 1
      - name: Upload test timing
        uses: actions/upload-artifact@v2
        with:
          retention-days: 1
          name: test-timing
          path: target/test-results/ns-timing-*.edn
  # fan-in tests so there's a single job we can add to protected branches.
  # otherwise, we'll have add all (range ${CTIA_NSPLITS}) jobs, and keep
  # them up to date
  # here's a GitHub Actions feature request that is relevant:
  # https://github.community/t/branch-protections-job-names-and-matrix-jobs/16317
  all-pr-checks:
    runs-on: ubuntu-18.04
    needs: [test-matrix]
    steps:
      - name: Setup PATH
        run: |
          mkdir -p ~/bin
          echo "~/bin" >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
            ~/bin
          key: ctia-all-pr-checks-${{ hashFiles('scripts/summarize-tests.clj') }}
          restore-keys: |
            ctia-all-pr-checks-
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/test-results/all-test-timings.edn
          key: ctia-all-test-timings-${{ env.GITHUB_REF }}-

      - name: Install babashka
        run: |
          if ! command -v bb &> /dev/null || ! bb --version | grep "^babashka v${BB_VERSION}$"
          then
            mkdir -p tmp
            cd tmp
            curl -sLO https://raw.githubusercontent.com/borkdude/babashka/master/install
            chmod +x install
            ./install --dir ~/bin --version 0.2.3
          fi
          bb --version

      - name: Download test timings
        uses: actions/download-artifact@v2
        with:
          name: test-timing
          path: target/test-results

      - name: Print test timings
        run: bb -f ./scripts/summarize-tests.clj

      - name: Upload all test timings
        uses: actions/upload-artifact@v2
        with:
          retention-days: 30
          name: all-test-timings
          path: target/test-results/all-test-timings.edn

      - run: echo "All tests pass!"
